{"searchDocs":[{"title":"Custom DB Integration (coming soon)","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/custom-db-integration","content":"Custom DB Integration (coming soon)","keywords":"","version":"Next"},{"title":"Gitlab CI","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/gitlab-ci","content":"","keywords":"","version":"Next"},{"title":"AskUI Runner: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Gitlab CI","url":"/docs/askui-studio/All-Integrations/gitlab-ci#askui-runner-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI Runner needs a configuration file config.yaml to know where to pull them from.  The AskUI Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these Gitlab variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $ASKUI_TOKEN inference_server_url: $ASKUI_INFERENCE_SERVER_URL workspace_id: $ASKUI_WORKSPACE_ID workflow_endpoint: prefixes: - workspaces/${ASKUI_WORKSPACE_ID}/test-cases url: ${ASKUI_WORKFLOW_ENDPOINT_URL}/workspaces/${ASKUI_WORKSPACE_ID}/objects EOF   Do not forget to login into Docker Hub and enable Docker-In-Docker like this 😉:  services: - docker:dind before_script: - docker info - echo &quot;$DOCKER_PASSWORD&quot; | docker login --username $DOCKER_USERNAME --password-stdin   Execute your workflows with our AskUI Runner container.  docker run --shm-size=&quot;2g&quot; --rm -v ./config.yaml:/home/askui/config.yaml -v ./allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from.  Check the detailed examples for your pipeline technology.  Please check the full example file on Gitlab.com.  ","version":"Next","tagName":"h2"},{"title":"Without AskUI Runner Container​","type":1,"pageTitle":"Gitlab CI","url":"/docs/askui-studio/All-Integrations/gitlab-ci#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UIController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on Gitlab.com. ","version":"Next","tagName":"h2"},{"title":"GitHub Actions","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/github-actions","content":"","keywords":"","version":"Next"},{"title":"AskUI Runner: Get Workflows from AskUI Studio​","type":1,"pageTitle":"GitHub Actions","url":"/docs/askui-studio/All-Integrations/github-actions#askui-runner-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI Runner needs a configuration file config.yaml to know where to pull them from.  The AskUI Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these environment variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: ${{ secrets.ASKUI_TOKEN }} inference_server_url: ${{ secrets.ASKUI_INFERENCE_SERVER_URL }} workspace_id: ${{ secrets.ASKUI_WORKSPACE_ID }} workflow_endpoint: prefixes: - workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/test-cases url: ${{ secrets.ASKUI_WORKFLOW_ENDPOINT_URL }}/workspaces/${{ secrets.ASKUI_WORKSPACE_ID }}/objects EOF   Execute your workflows with our AskUI Runner container. Do not forget to login into Docker Hub 😉.  docker run --shm-size=&quot;2g&quot; --rm -v ${{ github.workspace }}/config.yaml:/home/askui/config.yaml -v ${{ github.workspace }}/allure-results:/home/askui/test_project/allure-results askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  Please check the full example file on GitHub.  ","version":"Next","tagName":"h2"},{"title":"Without AskUI Runner Container​","type":1,"pageTitle":"GitHub Actions","url":"/docs/askui-studio/All-Integrations/github-actions#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Optional: Set up AskUI Controller as serviceSetup node in version 16.xInstall all dependencies: npm installRun tests with npm run test Set the environment variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UIController is running on a remote machine and not localhost or as a service inside your pipeline. For reports: Generate reportsDeploy/Send reports  Please check the full example file on GitHub. ","version":"Next","tagName":"h2"},{"title":"Webhook / API Call (coming soon)","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/webhook-api-call","content":"Webhook / API Call (coming soon)","keywords":"","version":"Next"},{"title":"Azure DevOps","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/azure-devops","content":"","keywords":"","version":"Next"},{"title":"AskUI Runner: Get Workflows from AskUI Studio​","type":1,"pageTitle":"Azure DevOps","url":"/docs/askui-studio/All-Integrations/azure-devops#askui-runner-get-workflows-from-askui-studio","content":" When you want to get the latest version of your workflows from AskUI Studio, the AskUI Runner needs a configuration file config.yaml to know where to pull them from.  The AskUI Runner downloads the workflows and runs them inside a docker container. You do not have to take care of any installation of tools on your side 🥳.  Set these variables for your pipeline:  ASKUI_WORKSPACE_ID=&lt;Your workspace id from AskUI Studio&gt; ASKUI_TOKEN=&lt;An access token from your AskUI Studio workspace&gt; ASKUI_INFERENCE_SERVER_URL=&lt;Use https://inference.askui.com if your are not on-premise&gt; ASKUI_WORKFLOW_ENDPOINT_URL=https://app-gateway-api.askui.com/prod/api/v1 DOCKER_USERNAME=&lt;Your Docker Hub username&gt; DOCKER_PASSWORD=&lt;Your Docker Hub password&gt;   Create a config.yaml inside your pipeline like this:  cat &lt;&lt; EOF &gt; config.yaml access_token: $(ASKUI_TOKEN) inference_server_url: $(ASKUI_INFERENCE_SERVER_URL) workspace_id: $(ASKUI_WORKSPACE_ID) workflow_endpoint: prefixes: - workspaces/$(ASKUI_WORKSPACE_ID)/test-cases url: $(ASKUI_WORKFLOW_ENDPOINT_URL)/workspaces/$(ASKUI_WORKSPACE_ID)/objects EOF   Execute your workflows with our AskUI Runner container. Do not forget to login into Docker Hub 😉.  echo &quot;$(DOCKER_PASSWORD)&quot; | docker login --username $(DOCKER_USERNAME) --password-stdin docker run --shm-size=&quot;2g&quot; --rm -v &quot;/$(pwd)/config.yaml:/home/askui/config.yaml&quot; -v &quot;/$(pwd)/allure-results:/home/askui/test_project/allure-results&quot; askuigmbh/askui-runner:v0.13.1-github   Generate Allure report: The run results are placed in allure-results where you can render your report from. Check the detailed examples for your pipeline technology.  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub.  ","version":"Next","tagName":"h2"},{"title":"Without AskUI Runner Container​","type":1,"pageTitle":"Azure DevOps","url":"/docs/askui-studio/All-Integrations/azure-devops#without-askui-runner-container","content":" Download the workflows from AskUI Studio and place the folder test in the root of your repository.  Then implement the following steps in your pipeline:  Set the pipeline variables: ASKUI_WORKSPACE_IDASKUI_TOKENASKUI_INFERENCE_SERVER_URLOptional: UI_CONTROLLER_URL if the UIController is running on a remote machine and not localhost or as a service inside your pipeline. Setup docker and node in version 16.x  - task: DockerInstaller@0 inputs: dockerVersion: '17.09.0-ce' - task: NodeTool@0 inputs: versionSpec: '16.x' displayName: 'Install Node.js'   Start the UIController from our Docker image  - bash: | sudo ufw disable echo 'Start UIController' docker run -d -p 6769:6769 --cidfile container.cid askuigmbh/askui-ui-controller:v0.11.2-chrome-100.0.4896.60-amd64   Install all dependencies and run the workflow:  echo 'Run npm install' npm install echo 'Run AskUI' export ASKUI_TOKEN=$(ASKUI_TOKEN) export ASKUI_WORKSPACE_ID=$(ASKUI_WORKSPACE_ID) npm run test   For reports: Generate reportsDeploy/Send reports  - bash: | curl -o allure-commandline-2.10.0.tgz -OLs https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.10.0/allure-commandline-2.10.0.tgz sudo tar -zxf allure-commandline-2.10.0.tgz -C . echo &quot;Creating allure-report&quot; ./allure-2.10.0/bin/allure generate allure-results -o allure-report echo &quot;allure-report created&quot; # Install https://github.com/mclay/azure-pipeline-allure-report first - task: PublishAllureReport@1 displayName: 'Publish Allure Report' inputs: reportDir: 'allure-report'   Please check the full example file on GitHub. ","version":"Next","tagName":"h2"},{"title":"MongoDB","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/mongodb","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"MongoDB","url":"/docs/askui-studio/All-Integrations/mongodb#prerequisites","content":" AskUI - Follow the Getting Started Guide for your operating system: Windows | Linux | macOSWeb browser  ","version":"Next","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"MongoDB","url":"/docs/askui-studio/All-Integrations/mongodb#setup","content":" Install the required dependencies for MongoDB  npm install --save-dev @shelf/jest-mongodb @types/mongodb mongodb merge   Create test/jest-preset.js for the database integration  const merge = require('merge'); const { defaults: tsJestPreset } = require('ts-jest/presets'); const jestMongodbPreset = require('@shelf/jest-mongodb/jest-preset'); module.exports = merge.recursive(tsJestPreset, jestMongodbPreset);   Add test/jest-preset.js as preset in test/jest.config.ts  import type { Config } from '@jest/types'; const config: Config.InitialOptions = { **preset: './jest-preset.js',** setupFilesAfterEnv: ['./helper/jest.setup.ts'], sandboxInjectedGlobals: [ 'Math', ], }; // eslint-disable-next-line import/no-default-export export default config;   Add environment variables for connection to AskUI backend and MongoDB database  export ASKUI_WORKSPACE_ID= export ASKUI_TOKEN= export MONGO_URI= export MONGO_DB_NAME=   Modify test/helper/jest.setup.ts to use the environment variables ASKUI_WORKSPACE_ID and ASKUI_TOKEN  ... const askuiConfig = { workspaceId: process.env.ASKUI_WORKSPACE_ID, token: process.env.ASKUI_TOKEN, } as const; ... aui = await UiControlClient.build({ credentials: { workspaceId: config.workspaceId, token: config.token, }, }); ...   Import the required dependencies in your workflow file (i.e. test/my-first-askui-test-suite.test.ts)  import { Collection, Document } from 'mongodb'; import { aui, mongodb } from './helper/jest.setup';   ","version":"Next","tagName":"h2"},{"title":"Usage Example​","type":1,"pageTitle":"MongoDB","url":"/docs/askui-studio/All-Integrations/mongodb#usage-example","content":" First we want to insert some test data into our database. In this example just two labels for buttons. But it can be anything you would normally store in a MongoDB.  note 💡If you already have test data in your database you can skip this step.  describe('jest with askui', () =&gt; { let buttons: Collection&lt;Document&gt;; beforeAll(async () =&gt; { // (Re-)Setting up db (may not be necessary // if the data in the db does not change and // is set up beforehand) buttons = mongodb.collection('buttons'); await buttons.insertOne({ label: 'CHECK OUT THE DOCS' }); await buttons.insertOne({ label: 'CONTACT SUPPORT' }); }); });   You can now use the test data in any subsequent test. Let us try to click the buttons with the labels we just stored before.  it('should click on buttons with a label', async () =&gt; { const buttonsCursor = buttons.find(); let nextButton = await buttonsCursor.next(); while (nextButton !== null) { await aui.clickButton(nextButton.label); nextButton = await buttonsCursor.next(); } });   ","version":"Next","tagName":"h2"},{"title":"Example Repository​","type":1,"pageTitle":"MongoDB","url":"/docs/askui-studio/All-Integrations/mongodb#example-repository","content":" We also provide an example repository on GitHub where you can check out the full setup described here 🙂. ","version":"Next","tagName":"h2"},{"title":"AskUI in Corporate Networks (coming soon)","type":0,"sectionRef":"#","url":"/docs/askui-studio/Help/askui-in-corporate-networks","content":"AskUI in Corporate Networks (coming soon)","keywords":"","version":"Next"},{"title":"Connect Your Data Source","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/connect-your-data-source","content":"Connect Your Data Source AskUI currently supports the following data sources: MongoDB Stay tuned for updates and additional data source integrations!","keywords":"","version":"Next"},{"title":"Frequently Asked Questions","type":0,"sectionRef":"#","url":"/docs/askui-studio/Help/frequently-asked-questions","content":"","keywords":"","version":"Next"},{"title":"How does AskUI use my data?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#how-does-askui-use-my-data","content":" Glad you asked! We fully comply with the European Union's General Data Protection Regulation (GDPR). This means you can request deletion, view, and change of your personal data.  When you use AskUI, screenshots get sent to our inference backend to analyze and predict elements. They only stay there for the duration of this process and get deleted immediately after.  ","version":"Next","tagName":"h2"},{"title":"How can I read a dynamically generated text from the UI and save it to an external file if necessary?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#how-can-i-read-a-dynamically-generated-text-from-the-ui-and-save-it-to-an-external-file-if-necessary","content":" This works best via custom code in the code editor. All code which is written there is run during execution.  ","version":"Next","tagName":"h3"},{"title":"Can I use it to automate Windows desktop applications? SilkTest has difficulties with Excel for example?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#can-i-use-it-to-automate-windows-desktop-applications-silktest-has-difficulties-with-excel-for-example","content":" Yes, our AskUI Controller basically always automates the operating system. OS automation works the same way as the cases shown.  ","version":"Next","tagName":"h3"},{"title":"Can I separate data to be entered from the workflow, e.g. to execute a workflow with 30 different values?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#can-i-separate-data-to-be-entered-from-the-workflow-eg-to-execute-a-workflow-with-30-different-values","content":" Yes, this is possible, variables can be used in the code view. In the SDK there is a tutorial here, for AskUI Studio a tutorial will follow https://www.askui.com/blog-posts/integrating-test-data-from-apis-csv-files-and-databases-into-askui-workflows.  ","version":"Next","tagName":"h3"},{"title":"It seems slow. Can I improve the speed?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#it-seems-slow-can-i-improve-the-speed","content":" We are basically limited at the speed of the app to be automated. However, recognizing elements from a screenshot takes a little bit of time. If you can navigate your app by keypresses it will speed up the execution.  ","version":"Next","tagName":"h3"},{"title":"Is it possible to control multiple devices in the same workflow?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#is-it-possible-to-control-multiple-devices-in-the-same-workflow","content":" This is also possible without any problems. For the SDK there is a tutorial here (for AskUI Studio we are implementing no-code support).  ","version":"Next","tagName":"h3"},{"title":"For native applications: How does the detection work if a window is not fullscreen but partially covering another window? Is it necessary to capture the whole screen or is it enough to capture the window in the foreground?​","type":1,"pageTitle":"Frequently Asked Questions","url":"/docs/askui-studio/Help/frequently-asked-questions#for-native-applications-how-does-the-detection-work-if-a-window-is-not-fullscreen-but-partially-covering-another-window-is-it-necessary-to-capture-the-whole-screen-or-is-it-enough-to-capture-the-window-in-the-foreground","content":" Currently we always capture the whole screen, but as long as the elements to be automated are visible, we can interact with them. ","version":"Next","tagName":"h3"},{"title":"Integrations","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/integrations","content":"","keywords":"","version":"Next"},{"title":"Supported integrations​","type":1,"pageTitle":"Integrations","url":"/docs/askui-studio/Onboarding-Guide/integrations#supported-integrations","content":" Connect Your Data Source MongoDB Trigger Workflows From Your CI Pipeline GitHub ActionsGitlab CIAzure DevOps  With these integrations, AskUIs can help you automate tasks, improve data management, and enhance collaboration across your team. Stay tuned for more integrations coming soon! ","version":"Next","tagName":"h3"},{"title":"Learn the Basics of AI Automation","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation","content":"","keywords":"","version":"Next"},{"title":"Strengths​","type":1,"pageTitle":"Learn the Basics of AI Automation","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation#strengths","content":" Automate apps without APIsFull control over the operating systemRobust visual selectors  ","version":"Next","tagName":"h3"},{"title":"Limitations​","type":1,"pageTitle":"Learn the Basics of AI Automation","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation#limitations","content":" Can make mistakes at firstRequires some knowledge of prompting  ","version":"Next","tagName":"h3"},{"title":"Use cases​","type":1,"pageTitle":"Learn the Basics of AI Automation","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation#use-cases","content":" Document processingSoftware testingMarketing automation  ","version":"Next","tagName":"h3"},{"title":"Take control​","type":1,"pageTitle":"Learn the Basics of AI Automation","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation#take-control","content":" To prompt an AI to do something, you need to give it some instructions. Once you “run” a workflow, an AI runner will carry out its contents, depending on what it sees on screen at that moment.  AI runners work on the highest layer of interaction - the same as humans. When hosted locally or in the cloud, they live on the operating system and control the mouse and keyboard to interact with their environment  A workflow is a sequence of steps, that lead the AI to the completion of a task that contains information about the intended action, which can include a description of an element that you want to perform the action on.  Action - describe what the runner should do.Elements - describe what the runner should perform the action on.Relations - specify the element’s location further.  Example instructions:  👈 Type in textfield left of button “Sign Up”👁️ Click on image matching “red nike shoes with purple laces”🧮 Get table containing text “Sales targets”  ","version":"Next","tagName":"h2"},{"title":"Empathize​","type":1,"pageTitle":"Learn the Basics of AI Automation","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation#empathize","content":" It might seem strange to mention empathy when talking about a statistical model. Yet this paradigm has proven to be extremely useful when using AI for the purpose of automating human-centered tasks.  It is all about providing clear instructions!    For some users, this comes easy, while for others, it’s a long journey of relearning concepts. In any case, we’re here to help you along the way.  Learn more about selecting elements  ","version":"Next","tagName":"h2"},{"title":"Run it​","type":1,"pageTitle":"Learn the Basics of AI Automation","url":"/docs/askui-studio/Onboarding-Guide/learn-the-basics-of-ai-automation#run-it","content":" Workflows can be triggered in two ways:  Event-based through a webhookTime-based through a schedule  ⚡ Event-based triggers execute workflows remotely, when an outside event occurs through a webhook. 🕒 Time-based triggers run in regular intervals from 5 minutes to every year. This feature is only  We provide support for a range of popular automation platforms, reporting solutions and data sources, environments that you can use to incorporate AskUI into your ecosystem  We are constantly adding more integrations and even allowing you to build your own custom integrations.  Go to integrations ","version":"Next","tagName":"h2"},{"title":"Deploy and Manage Your Own AskUI Runners","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners","content":"","keywords":"","version":"Next"},{"title":"Windows​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#windows","content":" ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#requirements","content":" Install the AskUI Controller with the AskUI-Installer first.Then switch into the AskUI Development Environment (ADE) by executing the command askui-shell in CMD.  ","version":"Next","tagName":"h3"},{"title":"AskUI-StartRunner Command​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#askui-startrunner-command","content":" The Askui-StartRunner command starts the AskUI Runner. This function accepts the following parameters:  Token: Specifies the AskUI token to be used for the runner. If not specified, the token from the AskUI settings is used.WorkspaceId: Specifies the AskUI workspace ID to be used for the runner. If not specified, the workspace ID from the AskUI settings is used.Port: Specifies the port of the device controller to be used for the runner. The default is 6769.WebSocketHost: Specifies the host of the device controller to be used for the runner. The default is 127.0.0.1.ForceProjectTemplateUpdate: Specifies whether to force the update of the project template. This is helpful for debugging.LogLevel: Specifies the AskUI Runner log level. Available values are: 'INFO', 'DEBUG', 'WARNING', 'ERROR', 'CRITICAL'. The default is 'INFO'.Tags: Specifies the tags to be set in the AskUI Runner configuration.  ","version":"Next","tagName":"h3"},{"title":"Linux and macOS​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#linux-and-macos","content":" warning Installing and running your own AskUI Runner requires you to know your way around the command line and be comfortable with developer tools like Python, Node and YAML. If you are working in an enterprise environment where your device is managed and access to internet is routed through a proxy; Our Enterprise Checklist will help you to set up all the requirements. In case you need help do not hesitate to contact us!  ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#requirements-1","content":" Python 3.10Node.js  ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#installation","content":" We recommend using a virtual environment for Python. Make sure python --version returns 3.10 or higher:  python -m venv venv source venv/bin/activate   We have not yet published the AskUI Runner to PyPI. For now, you can install it directly from GitHub (link to repository):  pip install git+https://github.com/askui/askui-runner.git   Currently, the standard logging output of the AskUI runner is minimal - we are soon going to change that. But you should see the runner starting the running of workflows as soon as you schedule some runs through the AskUI Studio.  ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#usage","content":" Create a configuration file (.y{a}ml or .json) in a directory of your choosing. The configuration file should contain at least some credentials and the command with which you start the runner without the config file flag:  credentials: workspace_id: &lt;workspace id&gt; # replace with your workspace id access_token: &lt;access token&gt; # replace with your access token runner: exec: python -m askui_runner # update if your command is different tags: [&lt;tag 1&gt;, &lt;tag 2&gt;, ..] # replace with your own runner tags   info Explanation for tags: When you create a run in AskUI Studio the tags determine which runner can poll a specific workflow. The runner only pulls workflows where one of the tags match.  Start the runner using  python -m askui_runner -c &lt;path to your config file, e.g., askui-runner.config.yaml&gt;   ","version":"Next","tagName":"h3"},{"title":"Start UIController​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#start-uicontroller","content":" If you want to run your workflows on the same system as the runner you need to start an UIController that listens on port 6769. Please download the one for your operating system and start it:  Please use our AskUI Installer and follow the Getting Started guide: WindowsLinux  warning macOS After installation to Applications remove the quarantine flag with the following command run from a terminal: xattr -d com.apple.quarantine /Applications/askui-ui-controller.app  macOS(Intel)macOS(Apple silicon)  ","version":"Next","tagName":"h3"},{"title":"Execute Workflows on a Remote System: Change UIController URL​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#execute-workflows-on-a-remote-system-change-uicontroller-url","content":" You can change the UIController-URL so the runner can talk to a UIController that runs on a remote machine or on a different port:  ... runner: ... controller: host: &quot;127.0.0.1&quot; port: 7000   ","version":"Next","tagName":"h3"},{"title":"Running a workflow​","type":1,"pageTitle":"Deploy and Manage Your Own AskUI Runners","url":"/docs/askui-studio/Onboarding-Guide/deploy-and-manage-your-own-runners#running-a-workflow","content":" Go back to AskUI Studio and access the workflow you intend to execute. Head over to the 'Run' tab located in the right sidebar and choose &quot;New Run.&quot; In the pop-up window that appears next, select &quot;Self-hosted&quot; and input one or more of the tags you previously included in the runner configuration file. ","version":"Next","tagName":"h2"},{"title":"Trigger Workflows from Your CI Pipeline","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/trigger-workflows-from-your-ci-pipeline","content":"Trigger Workflows from Your CI Pipeline At the moment, AskUI supports three CI pipeline integrations: Azure DevOps, GitHub Actions, and Gitlab CI. Each of these integrations provides an efficient way to automate the building, testing, and deployment of your application. Azure DevOps Azure DevOps is a comprehensive platform that provides various tools for project management, version control, and CI/CD. It offers a wide range of features such as agile project management, Git repositories, and continuous delivery, enabling users to build, test, and deploy their applications with ease. GitHub Actions GitHub Actions is a CI/CD platform that enables users to automate their workflows directly from their GitHub repositories. It provides a wide range of features such as continuous integration, continuous delivery, and event-driven workflows. GitHub Actions also offers a marketplace where users can discover and use various actions to build, test, and deploy their applications. Gitlab CI Gitlab CI is a popular CI/CD platform that provides an integrated DevOps toolchain for building, testing, and deploying applications. It enables users to automate their workflows and provides an intuitive interface for managing projects, repositories, and pipelines. Gitlab CI also provides a wide range of features such as continuous integration, continuous delivery, and code quality analysis. At AskUI, we understand the importance of automation and efficiency in the software development process. That's why we support these three CI pipeline integrations, enabling our users to build, test, and deploy their applications with ease and speed.","keywords":"","version":"Next"},{"title":"Select and Interact with Elements","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements","content":"","keywords":"","version":"Next"},{"title":"Interacting with Elements / Operating System​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#interacting-with-elements--operating-system","content":" AskUI automates based on your Operating System. Thus it offers every action a real human user can do at a Graphical User Interface (GUI).  Click on elements (Left, right and middle click)Move mouse cursorScrollPress keys on the keyboardTyping characters  Here are some examples of the actions and how they are entered as instructions in a step in the workflow editor. There are several variations of each command you can select from the dropdown-dialog. You might want to search for the one that is best suited for your use case:  Click on Mouse left click Move mouse to Scroll x &lt;number&gt; y &lt;number&gt; Press key control Type &quot;&lt;text&gt;&quot; in Type &quot;&lt;text&gt;&quot;   ","version":"Next","tagName":"h2"},{"title":"Selecting Elements​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#selecting-elements","content":" Selecting elements with AskUI is done visually. This means you describe what you see with a predefined syntax that is nearly natural language.  ","version":"Next","tagName":"h2"},{"title":"Text Selectors​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#text-selectors","content":" Let us start with a selector you will use a lot: The with text selector.  Clicking on a specific text is done like this:  Click on text with text &quot;your text&quot;   This clicks on your text, even if it is not exactly matched because it allows some letters to not match (text recognition is sometimes hard 🙃).  ","version":"Next","tagName":"h2"},{"title":"Exactly Matching a Text​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#exactly-matching-a-text","content":" Sometimes you need a text to match exactly. You achieve it with this instruction:  Click on text equals text &quot;your exact text&quot;   ","version":"Next","tagName":"h3"},{"title":"Matching a Text with Regex​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#matching-a-text-with-regex","content":" You can also specify the text you want to match with Regex. The next instruction matches text that starts with &quot;YES&quot; and can have any number of characters after &quot;YES&quot; such as &quot;YESTerday.”  Click on text match regex pattern &quot;^YES*&quot;   ","version":"Next","tagName":"h3"},{"title":"Select Different Types of Elements like Icons​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#select-different-types-of-elements-like-icons","content":" AskUI can detect different types of elements:  IconButtonTextfieldCheckboxImageswitchtable  ","version":"Next","tagName":"h2"},{"title":"Strategies for Selecting Elements​","type":1,"pageTitle":"Select and Interact with Elements","url":"/docs/askui-studio/Onboarding-Guide/select-and-interact-with-elements#strategies-for-selecting-elements","content":" You may wonder how to select them if there is for example more than one button detected by the inference?  Text Inside The Element  If there is text inside the element you can select the element by searching for the contained text:  Move mouse to textfield contain text &quot;Username&quot;   Matching an Icon with a Textual Description  For icons you can give a description to AskUI and it will find your element:  Move mouse to icon matching &quot;tetris block&quot;   Relational Selectors  If there is an element you can target near the element you want to select you can use a relational selectors:  abovebelowleftOfrightOfnearestTocontainsin  Here are some examples of how that would look. For a detailed explanation check the API docs linked for each selector, where you will get an idea of how they work.  Move mouse to checkbox above image Move mouse to textfield below text Move mouse to textfield leftOf text with text &quot;Password&quot; Move mouse to switch rightOf text with text &quot;Username&quot; Move mouse to button nearest to textfield Move mouse to image contains text with text &quot;Van Gogh&quot; Move mouse to textfield in image  ","version":"Next","tagName":"h3"},{"title":"Unlock More Flexibility with Code","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code","content":"","keywords":"","version":"Next"},{"title":"Switch to Code View​","type":1,"pageTitle":"Unlock More Flexibility with Code","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code#switch-to-code-view","content":" To switch to Code View you have to click the &lt;&gt;Code icon in your Workflow Editor.    This will bring up the code for your workflow which should look something like this.    info Please also consult our developer docs on how to write workflows with code. A good starting point might be one of our guides or a tutorial. Also, the API docs are linked below for an explanation of every feature: Guide: Text Element SelectorsTutorial: Cat Image Search on GoogleAPI docs  ","version":"Next","tagName":"h2"},{"title":"The Basics​","type":1,"pageTitle":"Unlock More Flexibility with Code","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code#the-basics","content":" Let us explain real quick what you are seeing.  You may notice the first line with the import and the *it-*block that contains your steps from the No Code View. Inside the it-block is where you will write your code. Do not touch anything else 😉.  import { aui } from &quot;@/helper/jest.setup&quot;; it(&quot;first-workflow.ts&quot;, async () =&gt; { ... });   If you look at the code you might notice that it is written in TypeScript as our AskUI SDK is written in that programming language.  ","version":"Next","tagName":"h2"},{"title":"What Can You Do with Code?​","type":1,"pageTitle":"Unlock More Flexibility with Code","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code#what-can-you-do-with-code","content":" We will show you three things you can only do within the Code View:  Get a value out of your screenshotReuse and/or manipulate that value by storing it inside a variableUse loops to iterate over elements  ","version":"Next","tagName":"h3"},{"title":"Get a Value Out of Your Screenshot​","type":1,"pageTitle":"Unlock More Flexibility with Code","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code#get-a-value-out-of-your-screenshot","content":" Maybe you have a text-captcha that consists of just numbers on your GUI. You need to solve it for your workflow to continue. Therefore you need to get() the value (See API docs for get()). See the next section on how to store the value in a variable for reuse.  await aui.get().text().above().text().withText(&quot;123456&quot;).exec();   ","version":"Next","tagName":"h3"},{"title":"Store Values in Variables and Reuse Them​","type":1,"pageTitle":"Unlock More Flexibility with Code","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code#store-values-in-variables-and-reuse-them","content":" You can define arbitrary variables like this.  const arbi42 = &quot;A string variable&quot;; const arbi27 = 27;   Or you can store the text-captcha from the section above and trim it with the power of TypeScript. You only need the numbers and not some unwanted whitespaces at the beginning, end or in the middle.  // See the API-Docs for get() // for the returned type of the detected elements const captchaDetectedElement = await aui.get().text().above().text(&quot;123456&quot;).exec(); // Get only the text-property of the element const captchaDetectedElement = texts[0]; // Extract the numbers with a Regex const captcha = captchaRaw.text.match(/\\d{6}/)[0];   Now the only thing that is left is to type the CAPTCHA back into the correct textfield  await aui.typeIn(captcha).textfield().contains().text().withText(&quot;123456&quot;).exec();   ","version":"Next","tagName":"h3"},{"title":"Loops for Iteration Over Elements​","type":1,"pageTitle":"Unlock More Flexibility with Code","url":"/docs/askui-studio/Onboarding-Guide/unlock-more-flexibility-with-code#loops-for-iteration-over-elements","content":" Sometimes you have some data you want to input into a form and don’t want to write an instruction for every textfield. If you store your data in an array you can iterate over it like this.  const data = ['Johannes', 'Dienst', 'AskUI Street', '42', 'Karlsruhe']; // Focus the first textfield await aui.clickTextfield('Firstname').exec(); // Use the tab-key to navigate through the form for (let entry of data) { await aui.type(entry).exec(); await aui.pressKey('tab').exec(); }   You can also retrieve elements and iterate over this. Loops can be used in a lot of ways 🦄. ","version":"Next","tagName":"h3"},{"title":"Start Working with Workflows","type":0,"sectionRef":"#","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows","content":"","keywords":"","version":"Next"},{"title":"Workflow and How to Create One​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#workflow-and-how-to-create-one","content":" info A workflow consists of a number of steps that are ordered sequentially. A workflow run executes all the steps of a workflow.  To create a workflow navigate to the workflow overview page by clicking on the Workflow menu item on the left.    Then click on + CREATE WORKFLOW in the upper right corner.    Enter a name for your workflow and click CREATE.    This will take you to the Workflow Editor.  ","version":"Next","tagName":"h2"},{"title":"Workflow Editor Structure​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#workflow-editor-structure","content":" The Workflow Editor can be confusing at first. So let’s make sense of it, shall we?  ","version":"Next","tagName":"h2"},{"title":"Left Side​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#left-side","content":" You can upload a screenshot for each step that gets annotated with bounding boxes that mark the elements found by our inference backend. Once you select a step on the right side.    When you hover over the bounding boxes you see what element type our inference backend detected.    ","version":"Next","tagName":"h3"},{"title":"Right Side​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#right-side","content":" On the right side under Steps, you can edit your steps. Each box is one step, with each step containing exactly one instruction.  info A step is the basic building block of a workflow. It represents an instruction that is carried out within the graphical user interface of a screen at a specific moment in time.    You can do the following things with a step:  Simulate once you entered an instructionAttach a screenshot that should be annotated (covered in the next section)Move up/downDelete  ","version":"Next","tagName":"h3"},{"title":"Design Your Workflow​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#design-your-workflow","content":" Each step needs an instruction, with which you specify what should happen on the user interface represented by the screenshot you uploaded.  info An instruction is a single AskUI directive that usually has the following parts: action + (optional) element-selector.  When you start out there is no instruction. Add one by clicking the + ADD button.  Click into the textfield Instruction to start editing the instruction.    An interaction with a GUI happens through so-called actions:  typeclickpress keymove mouse  You can scroll through all the commands from the drop-down box that appears when you focus the Instruction textfield.    For example to click the button on the top right with the text Get started from the screenshot we showed earlier you can write this. Use the annotations from the screenshot to find out with which elements you can interact:    Click on the little paper plane icon on the right to save your step.    Then click on the three dots of the step and on Simulate.    A red dot should appear over the selected element on the left side where your annotated screenshot is.  Congratulations! You selected an element visually and clicked on it with AskUI 🎉.  ","version":"Next","tagName":"h2"},{"title":"Overview","type":0,"sectionRef":"#","url":"/docs/askui-studio/overview","content":"Overview We are on a mission to liberate companies from repetitive work by simulating human input with artificial intelligence. With AskUI you can visually automate apps without any knowledge of the logical structure behind it.","keywords":"","version":"Next"},{"title":"Schedule/Run Your Workflow​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#schedulerun-your-workflow","content":" info When you choose an AskUI-hosted runner like in this guide your workflow will start at a browser window and will be limited to what you can do in a browser. Please add an instruction that enters a URL into the browser bar.  If you want to host your own runner in your own environment → Check out this guide    Your final workflow should look like this:    Once you are finished editing your workflow it is time to schedule the real thing: A run.  For this click on the calendar icon named Runs located right of the screenshot.    Then click on the button + New run in the right upper corner.    Give the Run a name. Under Runner select AskUI-hosted and leave the Run Time property at Run Now. Make sure you tick the checkbox for your workflow on the right side. Then click Create on the bottom left.    You should see status updates on the right bottom side and also a success message. The status of the scheduled run will be updated dynamically on the right side.  info Your scheduled run gets put in a queue and then executed. It might need a few minutes to finish.    ","version":"Next","tagName":"h2"},{"title":"View Report of Run​","type":1,"pageTitle":"Start Working with Workflows","url":"/docs/askui-studio/Onboarding-Guide/start-working-with-workflows#view-report-of-run","content":" Once your workflow run is finished you will get a nice report.  You can click on the View report.    Every run will be stored for you, so you can visit them later.    info If you want multiple runs of the same workflow to appear in one report you have to schedule it under the same name. This happens automatically if you schedule a regular run of your workflow. ","version":"Next","tagName":"h2"},{"title":"XRAY","type":0,"sectionRef":"#","url":"/docs/askui-studio/All-Integrations/xray","content":"","keywords":"","version":"Next"},{"title":"Generate Unit-XML With Your AskUI Workflow Run​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#generate-unit-xml-with-your-askui-workflow-run","content":" Unit-XML is a de-facto standard for test reports and XRAY supports it.  In your AskUI-node-project install the package jest-junit which will install a reporter that creates Unit-XML reports when you run workflows:  npm install --save-dev jest-junit   Then you need to activate it in askui_example/jest.config.ts by adding it to the config-object:  ... const config: Config.InitialOptions = { ... **reporters: [ &quot;default&quot;, &quot;jest-junit&quot; ], ...** }; ...   When you run your workflow(s) the XML-Reports are created in the root folder of your project. Please check the homepage of jest-junit for more configuration options.  ","version":"Next","tagName":"h2"},{"title":"Generate XRAY-JSON With Your AskUI Workflow Run​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#generate-xray-json-with-your-askui-workflow--run","content":" If you need reporting on a step-level you need a report in XRAY-JSON format. We provide a custom step reporter AskUIXRayStepReporter that creates the JSON for you.  ","version":"Next","tagName":"h2"},{"title":"Installation​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#installation","content":" Install @askui/askui-reporters as a dev-dependency in your AskUI project:  npm install --save-dev @askui/askui-reporters   ","version":"Next","tagName":"h3"},{"title":"Enable and Configure the AskUIXRayStepReporter in askui-helper.ts​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#enable-and-configure-the-askuixraystepreporter-inaskui-helperts","content":" You have to do a few things in your askui-helper.ts to enable the AskUIXRayStepReporter:  ℹ️ INFO: We will try to move this into the custom testEnvironment we provide.  Import the reporterInitialize the reporterAdd it to the UiControlClientModify before beforeEach() and afterEach() hook to create/finish TestEntriesAdd writing the report to afterAll() hook  import { UiControlClient, UiController } from 'askui'; /* 1 Import the reporter */ import { AskUIXRayStepReporter } from '@askui/askui-reporters'; ... /* 2 Initialize the reporter */ let xRayReporter = new AskUIXRayStepReporter({ withScreenshots: 'always', }); beforeAll(async () =&gt; { ... aui = await UiControlClient.build({ credentials: { workspaceId: '&lt;your workspace id&gt;', token: '&lt;your access token&gt;', }, /* 3 Enable reporter */ reporter: xRayReporter, }); await aui.connect(); }); /* 4 Create TestEntry with name of test from it-block */ beforeEach(async () =&gt; { xRayReporter.createNewTestEntry(global.testName); }); /* 4 Finish TestEntry with the test status */ afterEach(async () =&gt; { xRayReporter.finishTestEntry(global.testStatus); }); afterAll(async () =&gt; { /* 5 Writing the report */ await xRayReporter.writeReport(); aui.disconnect(); await uiController.stop(); }); export { aui };   ","version":"Next","tagName":"h3"},{"title":"Configure jest-xray-environment in jest.config.ts​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#configurejest-xray-environmentinjestconfigts","content":" For the AskUIXRayStepReporter step reporter to work properly you need a special testEnvironment that provides the names from the it-blocks used to create the JSON-Objects for each test. Configure the testEnvironment in your jest.config.ts as shown in the code below:  import type { Config } from '@jest/types'; const config: Config.InitialOptions = { preset: 'ts-jest', // This uses cjs module system // Replace cjs with esm if your project uses esm testEnvironment: '@askui/askui-reporters/dist/cjs/xray/jest-xray-environment.js', setupFilesAfterEnv: ['./helpers/askui-helper.ts'], sandboxInjectedGlobals: [ 'Math', ], reporters: [ &quot;default&quot;, &quot;jest-junit&quot; ] }; // eslint-disable-next-line import/no-default-export export default config;   ","version":"Next","tagName":"h3"},{"title":"Upload over XRay-API in your CI-Pipeline​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#upload-over-xray-api-in-your-ci-pipeline","content":" Following we describe how to transfer the created XRAY-JSON/XML-Report(s) to XRay in your continuous integration pipeline. For the sake of simplicity we assume there is no special configuration and the XRAY-JSON/XML-Report is saved to the file xray-report/report.json / junit.xml.  Please consult the official XRAY-Docs for more information about the import endpoint for XRAY-JSON (for XML: official XRAY-Docs). You also need a client_id and a client_secret so you can request a bearer-token (See official docs).  If you need help with setting up your CI-Pipeline in the first place, please consult our continuous integration docs.  ","version":"Next","tagName":"h2"},{"title":"GitHub​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#github","content":" Below you find the step you need to transfer the report file junit.xml to XRAY. Do not forget to set the variables (See also official docs):  - name: Submit results to Xray env: CLIENT_ID: ${{ secrets.client_id }} CLIENT_SECRET: ${{ secrets.client_secret }} JIRA_SERVER_URL: ${{ secrets.jira_server_url }} PROJECT_KEY: ${{ secrets.project_key }} run: | token=$(curl -H &quot;Content-Type: application/json&quot; -X POST --data '{ &quot;client_id&quot;: &quot;$CLIENT_ID&quot;,&quot;client_secret&quot;: &quot;$CLIENT_SECRET&quot; }' $JIRA_SERVER_URL/api/v2/authenticate) # XRAY-JSON curl -H &quot;Content-Type: application/json&quot; -X POST -H &quot;Authorization: Bearer $token&quot; --data @&quot;xray-report/report.json&quot; &quot;${JIRA_SERVER_URL}/api/v2/import/execution&quot; # XML curl -H &quot;Content-Type: text/xml&quot; -X POST -H &quot;Authorization: Bearer $token&quot; --data @&quot;junit.xml&quot; &quot;$JIRA_SERVER_URL/api/v2/import/execution/junit?projectKey=$PROJECT_KEY&quot;   ","version":"Next","tagName":"h2"},{"title":"Gitlab​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#gitlab","content":" Below you find the step you need to transfer the report file junit.xml to XRAY. Do not forget to set the variables (See also official docs):  # Example how to make junit.xml available run-askui-job: script: - npm run askui artifacts: paths: - junit.xml expire_in: 1 week # Expects the file junit.xml to be # made available through another step transfer-report-to-xray-job: script: - echo &quot;Transfer report to XRAY&quot; - token=$(curl -H &quot;Content-Type: application/json&quot; -X POST --data '{ &quot;client_id&quot;: &quot;${CLIENT_ID}&quot;,&quot;client_secret&quot;: &quot;${CLIENT_SECRET}&quot; }' $JIRA_SERVER_URL/api/v2/authenticate) - # XRAY-JSON - curl -H &quot;Content-Type: application/json&quot; -X POST -H &quot;Authorization: Bearer $token&quot; --data @&quot;xray-report/report.json&quot; &quot;${JIRA_SERVER_URL}/api/v2/import/execution&quot; - # XML - curl -H &quot;Content-Type: text/xml&quot; -X POST -H &quot;Authorization: Bearer $token&quot; --data @&quot;junit.xml&quot; &quot;${JIRA_SERVER_URL}/api/v2/import/execution/junit?projectKey=${PROJECT_KEY}&quot; - echo &quot;done&quot; variables: CLIENT_ID: $CLIENT_ID CLIENT_SECRET: $CLIENT_SECRET JIRA_SERVER_URL: $JIRA_SERVER_URL PROJECT_KEY: $PROJECT_KEY needs: - run-askui-job   ","version":"Next","tagName":"h2"},{"title":"Azure DevOps​","type":1,"pageTitle":"XRAY","url":"/docs/askui-studio/All-Integrations/xray#azure-devops","content":" Below you find the step you need to transfer the report file junit.xml to XRAY. Do not forget to set the variables (See also official docs):  steps: - bash: | ... npm run askui - bash: | token=$(curl -H &quot;Content-Type: application/json&quot; -X POST --data '{ &quot;client_id&quot;: &quot;${CLIENT_ID}&quot;,&quot;client_secret&quot;: &quot;${CLIENT_SECRET}&quot; }' $JIRA_SERVER_URL/api/v2/authenticate) # XRAY-JSON curl -H &quot;Content-Type: application/json&quot; -X POST -H &quot;Authorization: Bearer $token&quot; --data @&quot;xray-report/report.json&quot; &quot;${JIRA_SERVER_URL}/api/v2/import/execution&quot; # XML curl -H &quot;Content-Type: text/xml&quot; -X POST -H &quot;Authorization: Bearer $token&quot; --data @&quot;junit.xml&quot; &quot;${JIRA_SERVER_URL}/api/v2/import/execution/junit?projectKey=${PROJECT_KEY}&quot;  ","version":"Next","tagName":"h2"}],"options":{"indexBaseUrl":true,"maxHits":7,"includeRoutes":["/docs/**/askui-studio/*","/docs/**/askui-studio/**/*","/docs/askui-studio/*","/docs/askui-studio/**/*","/docs/next/askui-studio/*","/docs/next/askui-studio/**/*"],"id":"default"}}